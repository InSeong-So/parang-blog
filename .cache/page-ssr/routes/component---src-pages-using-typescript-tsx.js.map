{"version":3,"file":"component---src-pages-using-typescript-tsx.js","mappings":"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","sources":["webpack://blog/./src/pages/using-typescript.tsx","webpack://blog/./src/components/layout.js","webpack://blog/./src/components/seo.js"],"sourcesContent":["// If you don't want to use TypeScript you can delete this file!\nimport * as React from 'react';\nimport { PageProps, Link, graphql } from 'gatsby';\n\nimport Layout from '../components/layout';\nimport Seo from '../components/seo';\n\ntype DataProps = {\n  site: {\n    buildTime: string;\n  };\n};\n\nconst UsingTypescript: React.FC<PageProps<DataProps>> = ({ data, path, location }) => (\n  <Layout title=\"Using TypeScript\" location={location}>\n    <Seo title=\"Using TypeScript\" />\n    <h1>Gatsby supports TypeScript by default!</h1>\n    <p>\n      This means that you can create and write <em>.ts/.tsx</em> files for your pages, components\n      etc. Please note that the <em>gatsby-*.js</em> files (like gatsby-node.js) currently don't\n      support TypeScript yet.\n    </p>\n    <p>\n      For type checking you'll want to install <em>typescript</em> via npm and run{' '}\n      <em>tsc --init</em> to create a <em>tsconfig</em> file.\n    </p>\n    <p>\n      You're currently on the page \"{path}\" which was built on {data.site.buildTime}.\n    </p>\n    <p>\n      To learn more, head over to our{' '}\n      <a href=\"https://www.gatsbyjs.com/docs/typescript/\">documentation about TypeScript</a>.\n    </p>\n    <Link to=\"/\">Go back to the homepage</Link>\n  </Layout>\n);\n\nexport default UsingTypescript;\n\nexport const query = graphql`\n  {\n    site {\n      buildTime(formatString: \"YYYY-MM-DD hh:mm a z\")\n    }\n  }\n`;\n","import React from 'react';\nimport { Link } from 'gatsby';\n\nconst Layout = ({ location, title, children }) => {\n  const rootPath = `${__PATH_PREFIX__}/`;\n  const isRootPath = location.pathname === rootPath;\n  let header;\n\n  if (isRootPath) {\n    header = (\n      <h1 className=\"main-heading\">\n        <Link to=\"/\">{title}</Link>\n      </h1>\n    );\n  } else {\n    header = (\n      <Link className=\"header-link-home\" to=\"/\">\n        {title}\n      </Link>\n    );\n  }\n\n  return (\n    <div className=\"global-wrapper\" data-is-root-path={isRootPath}>\n      <header className=\"global-header\">{header}</header>\n      <main>{children}</main>\n      <footer>\n        Â© {new Date().getFullYear()}, Built with\n        {` `}\n        <a href=\"https://www.gatsbyjs.com\">Gatsby</a>\n      </footer>\n    </div>\n  );\n};\n\nexport default Layout;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Helmet } from 'react-helmet';\nimport { useStaticQuery, graphql } from 'gatsby';\n\nconst Seo = ({ description, lang, meta, title }) => {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            social {\n              twitter\n            }\n          }\n        }\n      }\n    `,\n  );\n\n  const metaDescription = description || site.siteMetadata.description;\n  const defaultTitle = site.siteMetadata?.title;\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang,\n      }}\n      title={title}\n      titleTemplate={defaultTitle ? `%s | ${defaultTitle}` : null}\n      meta={[\n        {\n          name: `description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:title`,\n          content: title,\n        },\n        {\n          property: `og:description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:type`,\n          content: `website`,\n        },\n        {\n          name: `twitter:card`,\n          content: `summary`,\n        },\n        {\n          name: `twitter:creator`,\n          content: site.siteMetadata?.social?.twitter || ``,\n        },\n        {\n          name: `twitter:title`,\n          content: title,\n        },\n        {\n          name: `twitter:description`,\n          content: metaDescription,\n        },\n      ].concat(meta)}\n    />\n  );\n};\n\nSeo.defaultProps = {\n  lang: `en`,\n  meta: [],\n  description: ``,\n};\n\nSeo.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.arrayOf(PropTypes.object),\n  title: PropTypes.string.isRequired,\n};\n\nexport default Seo;\n"],"names":["React","Link","Layout","Seo","UsingTypescript","data","path","location","title","site","buildTime","href","to","query","children","rootPath","__PATH_PREFIX__","isRootPath","pathname","header","Date","getFullYear","PropTypes","Helmet","description","lang","meta","metaDescription","siteMetadata","defaultTitle","name","content","property","social","twitter","concat","defaultProps","propTypes","string","arrayOf","object","isRequired"],"sourceRoot":""}